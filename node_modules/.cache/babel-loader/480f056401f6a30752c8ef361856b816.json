{"ast":null,"code":"var _jsxFileName = \"/Users/mac3/Desktop/workspace/AdminClient/src/routes/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { lazy, Suspense, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom';\nimport { getToken } from '../api/token';\nimport { Loading, NotFound } from '../components';\nimport { loadUser } from '../features/auth/state/authSlide';\nimport { GuestRouter, UserRouter } from './hoc-router'; // import pages\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = /*#__PURE__*/lazy(_c = () => import('../features/dashboard'));\n_c2 = Dashboard;\nconst Auth = /*#__PURE__*/lazy(_c3 = () => import('../features/auth'));\n_c4 = Auth;\n\nconst Routes = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const loading = useSelector(state => state.auth.loading);\n  const token = getToken();\n  useEffect(() => {\n    if (token) {\n      dispatch(loadUser());\n    }\n  }, []);\n  if (loading && token) return /*#__PURE__*/_jsxDEV(Loading, {\n    full: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 34\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Suspense, {\n    fallback: /*#__PURE__*/_jsxDEV(Loading, {\n      full: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 29\n    }, this),\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Redirect, {\n          exact: true,\n          from: \"/\",\n          to: \"/dashboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(UserRouter, {\n          path: \"/dashboard\",\n          children: /*#__PURE__*/_jsxDEV(Dashboard, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(GuestRouter, {\n          path: \"/auth\",\n          children: /*#__PURE__*/_jsxDEV(Auth, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          component: NotFound\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Routes, \"y0eKsQ6DH7PYrbU15Kspzta/MwQ=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c5 = Routes;\nexport default Routes;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"Dashboard$lazy\");\n$RefreshReg$(_c2, \"Dashboard\");\n$RefreshReg$(_c3, \"Auth$lazy\");\n$RefreshReg$(_c4, \"Auth\");\n$RefreshReg$(_c5, \"Routes\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/AdminClient/src/routes/index.tsx"],"names":["React","lazy","Suspense","useEffect","useDispatch","useSelector","BrowserRouter","Router","Redirect","Route","Switch","getToken","Loading","NotFound","loadUser","GuestRouter","UserRouter","Dashboard","Auth","Routes","dispatch","loading","state","auth","token"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,QAAtB,EAAgCC,SAAhC,QAAqD,OAArD;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,QAAlC,EAA4CC,KAA5C,EAAmDC,MAAnD,QAAiE,kBAAjE;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,OAAT,EAAkBC,QAAlB,QAAkC,eAAlC;AACA,SAASC,QAAT,QAAyB,kCAAzB;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,cAAxC,C,CAEA;;;AACA,MAAMC,SAAS,gBAAGhB,IAAI,MAAC,MAAM,OAAO,uBAAP,CAAP,CAAtB;MAAMgB,S;AACN,MAAMC,IAAI,gBAAGjB,IAAI,OAAC,MAAM,OAAO,kBAAP,CAAP,CAAjB;MAAMiB,I;;AAIN,MAAMC,MAAiB,GAAG,MAAM;AAAA;;AAC5B,QAAMC,QAAQ,GAAGhB,WAAW,EAA5B;AACA,QAAMiB,OAAO,GAAGhB,WAAW,CAAEiB,KAAD,IAAgBA,KAAK,CAACC,IAAN,CAAWF,OAA5B,CAA3B;AACA,QAAMG,KAAK,GAAGb,QAAQ,EAAtB;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIqB,KAAJ,EAAW;AACPJ,MAAAA,QAAQ,CAACN,QAAQ,EAAT,CAAR;AACH;AACJ,GAJQ,EAIN,EAJM,CAAT;AAMA,MAAIO,OAAO,IAAIG,KAAf,EAAsB,oBAAO,QAAC,OAAD;AAAS,IAAA,IAAI;AAAb;AAAA;AAAA;AAAA;AAAA,UAAP;AAEtB,sBACI,QAAC,QAAD;AAAU,IAAA,QAAQ,eAAE,QAAC,OAAD;AAAS,MAAA,IAAI;AAAb;AAAA;AAAA;AAAA;AAAA,YAApB;AAAA,2BACI,QAAC,MAAD;AAAA,6BACI,QAAC,MAAD;AAAA,gCACI,QAAC,QAAD;AAAU,UAAA,KAAK,MAAf;AAAgB,UAAA,IAAI,EAAC,GAArB;AAAyB,UAAA,EAAE,EAAC;AAA5B;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,UAAD;AAAY,UAAA,IAAI,EAAC,YAAjB;AAAA,iCACI,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAMI,QAAC,WAAD;AAAa,UAAA,IAAI,EAAC,OAAlB;AAAA,iCACI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBANJ,eAUI,QAAC,KAAD;AAAO,UAAA,SAAS,EAAEX;AAAlB;AAAA;AAAA;AAAA;AAAA,gBAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAkBH,CA/BD;;GAAMM,M;UACef,W,EACDC,W;;;MAFdc,M;AAiCN,eAAeA,MAAf","sourcesContent":["import React, { lazy, Suspense, useEffect, FC } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom';\nimport { getToken } from '../api/token';\nimport { Loading, NotFound } from '../components';\nimport { loadUser } from '../features/auth/state/authSlide';\nimport { GuestRouter, UserRouter } from './hoc-router';\n\n// import pages\nconst Dashboard = lazy(() => import('../features/dashboard'));\nconst Auth = lazy(() => import('../features/auth'));\n\ninterface Props {}\n\nconst Routes: FC<Props> = () => {\n    const dispatch = useDispatch();\n    const loading = useSelector((state: any) => state.auth.loading);\n    const token = getToken();\n\n    useEffect(() => {\n        if (token) {\n            dispatch(loadUser());\n        }\n    }, []);\n\n    if (loading && token) return <Loading full />;\n\n    return (\n        <Suspense fallback={<Loading full />}>\n            <Router>\n                <Switch>\n                    <Redirect exact from='/' to='/dashboard' />\n                    <UserRouter path='/dashboard'>\n                        <Dashboard />\n                    </UserRouter>\n\n                    <GuestRouter path='/auth'>\n                        <Auth />\n                    </GuestRouter>\n\n                    <Route component={NotFound} />\n                </Switch>\n            </Router>\n        </Suspense>\n    );\n};\n\nexport default Routes;\n"]},"metadata":{},"sourceType":"module"}