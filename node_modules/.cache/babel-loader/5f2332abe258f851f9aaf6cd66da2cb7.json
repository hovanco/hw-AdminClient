{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { pick } from 'lodash';\nimport storeApi from '../../../api/store-api';\nconst storeSlide = createSlice({\n  name: 'store',\n  initialState: {\n    loading: true,\n    stores: {},\n    page: 1,\n    limit: 10,\n    search: '',\n    sort: 'createdAt',\n    direction: 'desc'\n  },\n  reducers: {\n    loadStoresStart(state) {\n      state.loading = true;\n    },\n\n    loadStoresSuccess(state, action) {\n      state.stores = action.payload;\n      state.loading = false;\n    },\n\n    loadStoresFailed(state) {\n      state.loading = false;\n    },\n\n    updateSort(state, action) {\n      state.page = action.payload.page;\n      state.limit = action.payload.limit;\n      state.sort = action.payload.sort;\n      state.direction = action.payload.direction;\n    },\n\n    searchStore(state, action) {\n      state.search = action.payload;\n    }\n\n  }\n});\nconst {\n  actions,\n  reducer\n} = storeSlide;\nexport const {\n  loadStoresStart,\n  loadStoresSuccess,\n  loadStoresFailed,\n  updateSort,\n  searchStore\n} = actions;\nexport const loadStores = () => async (dispatch, getState) => {\n  try {\n    const state = getState();\n    const data = pick(state.store, ['page', 'limit', 'search', 'sort', 'direction']);\n    dispatch(loadStoresStart());\n    const response = await storeApi.loadStores(data);\n    dispatch(loadStoresSuccess(response));\n  } catch (err) {\n    dispatch(loadStoresFailed());\n  }\n};\nexport default reducer;","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/AdminClient/src/features/dashboard/state/storeSlide.ts"],"names":["createSlice","pick","storeApi","storeSlide","name","initialState","loading","stores","page","limit","search","sort","direction","reducers","loadStoresStart","state","loadStoresSuccess","action","payload","loadStoresFailed","updateSort","searchStore","actions","reducer","loadStores","dispatch","getState","data","store","response","err"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AAEA,MAAMC,UAAU,GAAGH,WAAW,CAAC;AAC3BI,EAAAA,IAAI,EAAE,OADqB;AAE3BC,EAAAA,YAAY,EAAE;AACVC,IAAAA,OAAO,EAAE,IADC;AAEVC,IAAAA,MAAM,EAAE,EAFE;AAGVC,IAAAA,IAAI,EAAE,CAHI;AAIVC,IAAAA,KAAK,EAAE,EAJG;AAKVC,IAAAA,MAAM,EAAE,EALE;AAMVC,IAAAA,IAAI,EAAE,WANI;AAOVC,IAAAA,SAAS,EAAE;AAPD,GAFa;AAW3BC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,eAAe,CAACC,KAAD,EAAQ;AACnBA,MAAAA,KAAK,CAACT,OAAN,GAAgB,IAAhB;AACH,KAHK;;AAINU,IAAAA,iBAAiB,CAACD,KAAD,EAAQE,MAAR,EAAgB;AAC7BF,MAAAA,KAAK,CAACR,MAAN,GAAeU,MAAM,CAACC,OAAtB;AACAH,MAAAA,KAAK,CAACT,OAAN,GAAgB,KAAhB;AACH,KAPK;;AAQNa,IAAAA,gBAAgB,CAACJ,KAAD,EAAQ;AACpBA,MAAAA,KAAK,CAACT,OAAN,GAAgB,KAAhB;AACH,KAVK;;AAWNc,IAAAA,UAAU,CAACL,KAAD,EAAQE,MAAR,EAAgB;AACtBF,MAAAA,KAAK,CAACP,IAAN,GAAaS,MAAM,CAACC,OAAP,CAAeV,IAA5B;AACAO,MAAAA,KAAK,CAACN,KAAN,GAAcQ,MAAM,CAACC,OAAP,CAAeT,KAA7B;AACAM,MAAAA,KAAK,CAACJ,IAAN,GAAaM,MAAM,CAACC,OAAP,CAAeP,IAA5B;AACAI,MAAAA,KAAK,CAACH,SAAN,GAAkBK,MAAM,CAACC,OAAP,CAAeN,SAAjC;AACH,KAhBK;;AAiBNS,IAAAA,WAAW,CAACN,KAAD,EAAQE,MAAR,EAAgB;AACvBF,MAAAA,KAAK,CAACL,MAAN,GAAeO,MAAM,CAACC,OAAtB;AACH;;AAnBK;AAXiB,CAAD,CAA9B;AAkCA,MAAM;AAAEI,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAuBpB,UAA7B;AAEA,OAAO,MAAM;AACTW,EAAAA,eADS;AAETE,EAAAA,iBAFS;AAGTG,EAAAA,gBAHS;AAITC,EAAAA,UAJS;AAKTC,EAAAA;AALS,IAMTC,OANG;AAQP,OAAO,MAAME,UAAU,GAAG,MAAM,OAAOC,QAAP,EAAsBC,QAAtB,KAAwC;AACpE,MAAI;AACA,UAAMX,KAAK,GAAGW,QAAQ,EAAtB;AACA,UAAMC,IAAI,GAAG1B,IAAI,CAACc,KAAK,CAACa,KAAP,EAAc,CAAC,MAAD,EAAS,OAAT,EAAkB,QAAlB,EAA4B,MAA5B,EAAoC,WAApC,CAAd,CAAjB;AACAH,IAAAA,QAAQ,CAACX,eAAe,EAAhB,CAAR;AACA,UAAMe,QAAQ,GAAG,MAAM3B,QAAQ,CAACsB,UAAT,CAAoBG,IAApB,CAAvB;AAEAF,IAAAA,QAAQ,CAACT,iBAAiB,CAACa,QAAD,CAAlB,CAAR;AACH,GAPD,CAOE,OAAOC,GAAP,EAAY;AACVL,IAAAA,QAAQ,CAACN,gBAAgB,EAAjB,CAAR;AACH;AACJ,CAXM;AAaP,eAAeI,OAAf","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { pick } from 'lodash';\nimport storeApi from '../../../api/store-api';\n\nconst storeSlide = createSlice({\n    name: 'store',\n    initialState: {\n        loading: true,\n        stores: {},\n        page: 1,\n        limit: 10,\n        search: '',\n        sort: 'createdAt',\n        direction: 'desc',\n    },\n    reducers: {\n        loadStoresStart(state) {\n            state.loading = true;\n        },\n        loadStoresSuccess(state, action) {\n            state.stores = action.payload;\n            state.loading = false;\n        },\n        loadStoresFailed(state) {\n            state.loading = false;\n        },\n        updateSort(state, action) {\n            state.page = action.payload.page;\n            state.limit = action.payload.limit;\n            state.sort = action.payload.sort;\n            state.direction = action.payload.direction;\n        },\n        searchStore(state, action) {\n            state.search = action.payload;\n        },\n    },\n});\n\nconst { actions, reducer } = storeSlide;\n\nexport const {\n    loadStoresStart,\n    loadStoresSuccess,\n    loadStoresFailed,\n    updateSort,\n    searchStore,\n} = actions;\n\nexport const loadStores = () => async (dispatch: any, getState: any) => {\n    try {\n        const state = getState();\n        const data = pick(state.store, ['page', 'limit', 'search', 'sort', 'direction']);\n        dispatch(loadStoresStart());\n        const response = await storeApi.loadStores(data);\n\n        dispatch(loadStoresSuccess(response));\n    } catch (err) {\n        dispatch(loadStoresFailed());\n    }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}