{"ast":null,"code":"const setToken = ({\n  token,\n  remember = true\n}) => {\n  const tokenString = JSON.stringify(token);\n\n  if (remember) {\n    return localStorage.setItem('token', tokenString);\n  }\n\n  return sessionStorage.setItem('token', tokenString);\n};\n\nconst getToken = () => {\n  const tokenString = localStorage.getItem('token') || sessionStorage.getItem('token');\n  if (!tokenString) return null;\n  const token = JSON.parse(tokenString);\n  return token.accessToken;\n};\n\nconst removeToken = () => {\n  localStorage.removeItem('token');\n  sessionStorage.removeItem('token');\n};\n\nexport { setToken, getToken, removeToken };","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/AdminClient/src/api/token.ts"],"names":["setToken","token","remember","tokenString","JSON","stringify","localStorage","setItem","sessionStorage","getToken","getItem","parse","accessToken","removeToken","removeItem"],"mappings":"AAMA,MAAMA,QAAQ,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,QAAQ,GAAG;AAApB,CAAD,KAA6E;AAC1F,QAAMC,WAAW,GAAGC,IAAI,CAACC,SAAL,CAAeJ,KAAf,CAApB;;AAEA,MAAIC,QAAJ,EAAc;AACV,WAAOI,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BJ,WAA9B,CAAP;AACH;;AAED,SAAOK,cAAc,CAACD,OAAf,CAAuB,OAAvB,EAAgCJ,WAAhC,CAAP;AACH,CARD;;AASA,MAAMM,QAAQ,GAAG,MAAqB;AAClC,QAAMN,WAAW,GAAGG,YAAY,CAACI,OAAb,CAAqB,OAArB,KAAiCF,cAAc,CAACE,OAAf,CAAuB,OAAvB,CAArD;AAEA,MAAI,CAACP,WAAL,EAAkB,OAAO,IAAP;AAElB,QAAMF,KAAa,GAAGG,IAAI,CAACO,KAAL,CAAWR,WAAX,CAAtB;AAEA,SAAOF,KAAK,CAACW,WAAb;AACH,CARD;;AAUA,MAAMC,WAAW,GAAG,MAAM;AACtBP,EAAAA,YAAY,CAACQ,UAAb,CAAwB,OAAxB;AACAN,EAAAA,cAAc,CAACM,UAAf,CAA0B,OAA1B;AACH,CAHD;;AAKA,SAASd,QAAT,EAAmBS,QAAnB,EAA6BI,WAA7B","sourcesContent":["export interface IToken {\n    accessToken: string;\n    expiredIn: number;\n    type: string;\n}\n\nconst setToken = ({ token, remember = true }: { token: IToken; remember?: boolean }): void => {\n    const tokenString = JSON.stringify(token);\n\n    if (remember) {\n        return localStorage.setItem('token', tokenString);\n    }\n\n    return sessionStorage.setItem('token', tokenString);\n};\nconst getToken = (): string | null => {\n    const tokenString = localStorage.getItem('token') || sessionStorage.getItem('token');\n\n    if (!tokenString) return null;\n\n    const token: IToken = JSON.parse(tokenString);\n\n    return token.accessToken;\n};\n\nconst removeToken = () => {\n    localStorage.removeItem('token');\n    sessionStorage.removeItem('token');\n};\n\nexport { setToken, getToken, removeToken };\n"]},"metadata":{},"sourceType":"module"}