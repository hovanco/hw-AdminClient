{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { pick } from 'lodash';\nimport orderApi from '../../../api/order-api';\nconst OrderSlide = createSlice({\n  name: 'store',\n  initialState: {\n    loading: true,\n    orders: {\n      data: [],\n      total: 0\n    },\n    page: 1,\n    limit: 10,\n    name: '',\n    sort: 'createAt',\n    direction: 'desc'\n  },\n  reducers: {\n    loadOrdersStart(state) {\n      state.loading = true;\n    },\n\n    loadOrdersSuccess(state, action) {\n      state.orders = action.payload;\n      state.loading = false;\n    },\n\n    loadOrdersFailed(state) {\n      state.loading = false;\n    },\n\n    updateSort(state, action) {\n      state.page = action.payload.page;\n      state.limit = action.payload.limit;\n      state.sort = action.payload.sort;\n      state.direction = action.payload.direction;\n    }\n\n  }\n});\nconst {\n  actions,\n  reducer\n} = OrderSlide;\nexport const {\n  loadOrdersStart,\n  loadOrdersSuccess,\n  loadOrdersFailed,\n  updateSort\n} = actions;\nexport const loadOrders = storeId => async (dispatch, getState) => {\n  try {\n    const state = getState();\n    const data = pick(state.store, ['page', 'limit', 'name', 'sort', 'direction']);\n    dispatch(loadOrdersStart());\n    const response = await orderApi.loadOrders(storeId, data);\n    dispatch(loadOrdersSuccess(response));\n  } catch (err) {\n    dispatch(loadOrdersFailed());\n  }\n};\nexport default reducer;","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/AdminClient/src/features/dashboard/state/ordersSlide.ts"],"names":["createSlice","pick","orderApi","OrderSlide","name","initialState","loading","orders","data","total","page","limit","sort","direction","reducers","loadOrdersStart","state","loadOrdersSuccess","action","payload","loadOrdersFailed","updateSort","actions","reducer","loadOrders","storeId","dispatch","getState","store","response","err"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AAEA,MAAMC,UAAU,GAAGH,WAAW,CAAC;AAC3BI,EAAAA,IAAI,EAAE,OADqB;AAE3BC,EAAAA,YAAY,EAAE;AACVC,IAAAA,OAAO,EAAE,IADC;AAEVC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,IAAI,EAAE,EAAR;AAAYC,MAAAA,KAAK,EAAE;AAAnB,KAFE;AAGVC,IAAAA,IAAI,EAAE,CAHI;AAIVC,IAAAA,KAAK,EAAE,EAJG;AAKVP,IAAAA,IAAI,EAAE,EALI;AAMVQ,IAAAA,IAAI,EAAE,UANI;AAOVC,IAAAA,SAAS,EAAE;AAPD,GAFa;AAW3BC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,eAAe,CAACC,KAAD,EAAQ;AACnBA,MAAAA,KAAK,CAACV,OAAN,GAAgB,IAAhB;AACH,KAHK;;AAINW,IAAAA,iBAAiB,CAACD,KAAD,EAAQE,MAAR,EAAgB;AAC7BF,MAAAA,KAAK,CAACT,MAAN,GAAeW,MAAM,CAACC,OAAtB;AACAH,MAAAA,KAAK,CAACV,OAAN,GAAgB,KAAhB;AACH,KAPK;;AAQNc,IAAAA,gBAAgB,CAACJ,KAAD,EAAQ;AACpBA,MAAAA,KAAK,CAACV,OAAN,GAAgB,KAAhB;AACH,KAVK;;AAWNe,IAAAA,UAAU,CAACL,KAAD,EAAQE,MAAR,EAAgB;AACtBF,MAAAA,KAAK,CAACN,IAAN,GAAaQ,MAAM,CAACC,OAAP,CAAeT,IAA5B;AACAM,MAAAA,KAAK,CAACL,KAAN,GAAcO,MAAM,CAACC,OAAP,CAAeR,KAA7B;AACAK,MAAAA,KAAK,CAACJ,IAAN,GAAaM,MAAM,CAACC,OAAP,CAAeP,IAA5B;AACAI,MAAAA,KAAK,CAACH,SAAN,GAAkBK,MAAM,CAACC,OAAP,CAAeN,SAAjC;AACH;;AAhBK;AAXiB,CAAD,CAA9B;AA+BA,MAAM;AAAES,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAuBpB,UAA7B;AAEA,OAAO,MAAM;AAAEY,EAAAA,eAAF;AAAmBE,EAAAA,iBAAnB;AAAsCG,EAAAA,gBAAtC;AAAwDC,EAAAA;AAAxD,IAAuEC,OAA7E;AAEP,OAAO,MAAME,UAAU,GAAIC,OAAD,IAAqB,OAAOC,QAAP,EAAsBC,QAAtB,KAAwC;AACnF,MAAI;AACA,UAAMX,KAAK,GAAGW,QAAQ,EAAtB;AACA,UAAMnB,IAAI,GAAGP,IAAI,CAACe,KAAK,CAACY,KAAP,EAAc,CAAC,MAAD,EAAS,OAAT,EAAkB,MAAlB,EAA0B,MAA1B,EAAkC,WAAlC,CAAd,CAAjB;AACAF,IAAAA,QAAQ,CAACX,eAAe,EAAhB,CAAR;AACA,UAAMc,QAAQ,GAAG,MAAM3B,QAAQ,CAACsB,UAAT,CAAoBC,OAApB,EAA6BjB,IAA7B,CAAvB;AAEAkB,IAAAA,QAAQ,CAACT,iBAAiB,CAACY,QAAD,CAAlB,CAAR;AACH,GAPD,CAOE,OAAOC,GAAP,EAAY;AACVJ,IAAAA,QAAQ,CAACN,gBAAgB,EAAjB,CAAR;AACH;AACJ,CAXM;AAaP,eAAeG,OAAf","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { pick } from 'lodash';\nimport orderApi from '../../../api/order-api';\n\nconst OrderSlide = createSlice({\n    name: 'store',\n    initialState: {\n        loading: true,\n        orders: { data: [], total: 0 },\n        page: 1,\n        limit: 10,\n        name: '',\n        sort: 'createAt',\n        direction: 'desc',\n    },\n    reducers: {\n        loadOrdersStart(state) {\n            state.loading = true;\n        },\n        loadOrdersSuccess(state, action) {\n            state.orders = action.payload;\n            state.loading = false;\n        },\n        loadOrdersFailed(state) {\n            state.loading = false;\n        },\n        updateSort(state, action) {\n            state.page = action.payload.page;\n            state.limit = action.payload.limit;\n            state.sort = action.payload.sort;\n            state.direction = action.payload.direction;\n        },\n    },\n});\n\nconst { actions, reducer } = OrderSlide;\n\nexport const { loadOrdersStart, loadOrdersSuccess, loadOrdersFailed, updateSort } = actions;\n\nexport const loadOrders = (storeId: string) => async (dispatch: any, getState: any) => {\n    try {\n        const state = getState();\n        const data = pick(state.store, ['page', 'limit', 'name', 'sort', 'direction']);\n        dispatch(loadOrdersStart());\n        const response = await orderApi.loadOrders(storeId, data);\n\n        dispatch(loadOrdersSuccess(response));\n    } catch (err) {\n        dispatch(loadOrdersFailed());\n    }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}