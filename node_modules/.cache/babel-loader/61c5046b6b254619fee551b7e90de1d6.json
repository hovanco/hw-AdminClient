{"ast":null,"code":"import axios from 'axios';\nimport queryString from 'query-string';\nimport constants from '../constants';\nimport { getToken } from './token';\nconst axiosClient = axios.create({\n  baseURL: constants.URL_API,\n  headers: {\n    'content-type': 'application/json'\n  },\n  paramsSerializer: params => queryString.stringify(params)\n});\naxiosClient.interceptors.request.use(async config => {\n  const token = getToken();\n\n  if (token) {\n    config.headers['Authorization'] = 'Bearer ' + token;\n  } // Handle token here ...\n\n\n  return config;\n});\naxiosClient.interceptors.response.use(response => {\n  if (response && response.data) {\n    return response.data;\n  }\n\n  return response;\n}, error => {\n  // Handle errors\n  throw error;\n});\nexport default axiosClient;","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/AdminClient/src/api/axios-client.ts"],"names":["axios","queryString","constants","getToken","axiosClient","create","baseURL","URL_API","headers","paramsSerializer","params","stringify","interceptors","request","use","config","token","response","data","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAASC,QAAT,QAAyB,SAAzB;AAEA,MAAMC,WAAW,GAAGJ,KAAK,CAACK,MAAN,CAAa;AAC7BC,EAAAA,OAAO,EAAEJ,SAAS,CAACK,OADU;AAE7BC,EAAAA,OAAO,EAAE;AACL,oBAAgB;AADX,GAFoB;AAK7BC,EAAAA,gBAAgB,EAAGC,MAAD,IAAYT,WAAW,CAACU,SAAZ,CAAsBD,MAAtB;AALD,CAAb,CAApB;AAQAN,WAAW,CAACQ,YAAZ,CAAyBC,OAAzB,CAAiCC,GAAjC,CAAqC,MAAOC,MAAP,IAAkB;AACnD,QAAMC,KAAK,GAAGb,QAAQ,EAAtB;;AAEA,MAAIa,KAAJ,EAAW;AACPD,IAAAA,MAAM,CAACP,OAAP,CAAe,eAAf,IAAkC,YAAYQ,KAA9C;AACH,GALkD,CAMnD;;;AACA,SAAOD,MAAP;AACH,CARD;AAUAX,WAAW,CAACQ,YAAZ,CAAyBK,QAAzB,CAAkCH,GAAlC,CACKG,QAAD,IAAc;AACV,MAAIA,QAAQ,IAAIA,QAAQ,CAACC,IAAzB,EAA+B;AAC3B,WAAOD,QAAQ,CAACC,IAAhB;AACH;;AAED,SAAOD,QAAP;AACH,CAPL,EAQKE,KAAD,IAAW;AACP;AACA,QAAMA,KAAN;AACH,CAXL;AAcA,eAAef,WAAf","sourcesContent":["import axios from 'axios';\nimport queryString from 'query-string';\nimport constants from '../constants';\nimport { getToken } from './token';\n\nconst axiosClient = axios.create({\n    baseURL: constants.URL_API,\n    headers: {\n        'content-type': 'application/json',\n    },\n    paramsSerializer: (params) => queryString.stringify(params),\n});\n\naxiosClient.interceptors.request.use(async (config) => {\n    const token = getToken();\n\n    if (token) {\n        config.headers['Authorization'] = 'Bearer ' + token;\n    }\n    // Handle token here ...\n    return config;\n});\n\naxiosClient.interceptors.response.use(\n    (response) => {\n        if (response && response.data) {\n            return response.data;\n        }\n\n        return response;\n    },\n    (error) => {\n        // Handle errors\n        throw error;\n    }\n);\n\nexport default axiosClient;\n"]},"metadata":{},"sourceType":"module"}