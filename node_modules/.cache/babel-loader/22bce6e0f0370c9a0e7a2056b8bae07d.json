{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { pick } from 'lodash';\nimport { message } from 'antd';\nimport fanpageApi from '../../../api/fanpage-api';\nconst fanpageSlide = createSlice({\n  name: 'fanpage',\n  initialState: {\n    loading: true,\n    fanpage: {},\n    page: 1,\n    limit: 10,\n    name: '',\n    sort: 'createdAt',\n    direction: 'desc'\n  },\n  reducers: {\n    loadFanpageStart(state) {\n      state.loading = true;\n    },\n\n    loadFanpageSuccess(state, action) {\n      state.fanpage = action.payload;\n      state.loading = false;\n    },\n\n    loadFanpageFailed(state) {\n      state.loading = false;\n    },\n\n    updateSort(state, action) {\n      state.page = action.payload.page;\n      state.limit = action.payload.limit;\n      state.sort = action.payload.sort;\n      state.direction = action.payload.direction;\n    },\n\n    searchFanpage(state, action) {\n      state.name = action.payload;\n    }\n\n  }\n});\nconst {\n  actions,\n  reducer\n} = fanpageSlide;\nexport const {\n  loadFanpageStart,\n  loadFanpageSuccess,\n  loadFanpageFailed,\n  updateSort,\n  searchFanpage\n} = actions;\nexport const loadFanpage = () => async (dispatch, getState) => {\n  try {\n    const state = getState();\n    const data = pick(state.fanpage, ['page', 'limit', 'name', 'sort', 'direction']);\n    dispatch(loadFanpageStart());\n    const response = await fanpageApi.loadFanpage(data);\n    dispatch(loadFanpageSuccess(response));\n  } catch (err) {\n    dispatch(loadFanpageFailed());\n  }\n};\nexport const updateFanpage = dataPut => async (dispatch, getState) => {\n  try {\n    const response = await fanpageApi.updateFanpageRequest(dataPut);\n    message.success('Cập nhật thành công');\n  } catch (err) {\n    console.log(err);\n    dispatch(loadFanpageFailed());\n  }\n};\nexport default reducer;","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/AdminClient/src/features/dashboard/state/fanpageSlide.ts"],"names":["createSlice","pick","message","fanpageApi","fanpageSlide","name","initialState","loading","fanpage","page","limit","sort","direction","reducers","loadFanpageStart","state","loadFanpageSuccess","action","payload","loadFanpageFailed","updateSort","searchFanpage","actions","reducer","loadFanpage","dispatch","getState","data","response","err","updateFanpage","dataPut","updateFanpageRequest","success","console","log"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { pick } from 'lodash';\nimport { message } from 'antd';\nimport fanpageApi from '../../../api/fanpage-api';\n\nconst fanpageSlide = createSlice({\n    name: 'fanpage',\n    initialState: {\n        loading: true,\n        fanpage: {},\n        page: 1,\n        limit: 10,\n        name: '',\n        sort: 'createdAt',\n        direction: 'desc',\n    },\n    reducers: {\n        loadFanpageStart(state) {\n            state.loading = true;\n        },\n        loadFanpageSuccess(state, action) {\n            state.fanpage = action.payload;\n            state.loading = false;\n        },\n        loadFanpageFailed(state) {\n            state.loading = false;\n        },\n        updateSort(state, action) {\n            state.page = action.payload.page;\n            state.limit = action.payload.limit;\n            state.sort = action.payload.sort;\n            state.direction = action.payload.direction;\n        },\n        searchFanpage(state, action) {\n            state.name = action.payload;\n        },\n    },\n});\n\nconst { actions, reducer } = fanpageSlide;\n\nexport const {\n    loadFanpageStart,\n    loadFanpageSuccess,\n    loadFanpageFailed,\n    updateSort,\n    searchFanpage,\n} = actions;\n\nexport const loadFanpage = () => async (dispatch: any, getState: any) => {\n    try {\n        const state = getState();\n        const data = pick(state.fanpage, ['page', 'limit', 'name', 'sort', 'direction']);\n        dispatch(loadFanpageStart());\n        const response = await fanpageApi.loadFanpage(data);\n\n        dispatch(loadFanpageSuccess(response));\n    } catch (err) {\n        dispatch(loadFanpageFailed());\n    }\n};\n\nexport const updateFanpage = (dataPut: any) => async (dispatch: any, getState: any) => {\n    try {\n        const response = await fanpageApi.updateFanpageRequest(dataPut);\n        message.success('Cập nhật thành công');\n    } catch (err) {\n        console.log(err);\n        dispatch(loadFanpageFailed());\n    }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}