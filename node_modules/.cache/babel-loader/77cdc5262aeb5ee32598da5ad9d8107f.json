{"ast":null,"code":"var _jsxFileName = \"/Users/mac3/Desktop/workspace/AdminClient/src/features/dashboard/components/detailStore/chart.tsx\",\n    _s = $RefreshSig$();\n\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { Col, Divider, Row, Skeleton, Space } from 'antd';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { get, map } from 'lodash';\nimport moment from 'moment';\nimport React, { useEffect, useState } from 'react';\nimport storeApi from '../../../../api/store-api';\nimport { EFilterType } from '../../../../constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Chart = ({\n  filterType,\n  storeId\n}) => {\n  _s();\n\n  const [data, setData] = useState([]);\n  const [totalCustomer, setTotalCustomer] = useState(0);\n  const [totalOrder, setTotalOrder] = useState(0);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    async function getFigures() {\n      try {\n        if (!storeId) {\n          setLoading(false);\n          return;\n        }\n\n        setLoading(true);\n        const startTime = moment().startOf(filterType).valueOf().toString();\n        const endTime = moment().endOf(filterType).valueOf().toString();\n        const data = await storeApi.getFigures({\n          storeId,\n          startTime,\n          endTime\n        });\n        const totalCustomer = get(data, 'totalCustomer', 0);\n        setTotalCustomer(totalCustomer);\n        const totalOrder = get(data, 'totalOrder', 0);\n        setTotalOrder(totalOrder);\n        const dataChart = get(data, 'data', []);\n        setData(dataChart);\n      } catch (err) {} finally {\n        setLoading(false);\n      }\n    }\n\n    getFigures();\n  }, [filterType, storeId]);\n  const names = ['Số lượng khách hàng', 'Số đơn hàng'];\n  const colors = ['#6c6fbf', '#F67B68'];\n\n  const options = (data, names, colors) => ({\n    title: {\n      text: ''\n    },\n    subtitle: {\n      text: ''\n    },\n    xAxis: {\n      categories: filterType === EFilterType.WEEK ? ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'] : map(data, item => item.date.split('/')[0])\n    },\n    yAxis: {\n      title: {\n        text: ''\n      }\n    },\n    series: [{\n      showInLegend: false,\n      name: names[0],\n      type: 'column',\n      data: map(data, item => item.customerCount)\n    }, {\n      showInLegend: false,\n      name: names[1],\n      type: 'column',\n      data: map(data, item => item.orderCount)\n    }],\n    chart: {\n      height: 250\n    },\n    colors: colors,\n    plotOptions: {\n      column: {\n        borderRadius: 5,\n        pointWidth: filterType === EFilterType.WEEK ? 20 : undefined\n      }\n    }\n  });\n\n  return /*#__PURE__*/_jsxDEV(Row, {\n    style: {\n      paddingLeft: 5\n    },\n    children: [/*#__PURE__*/_jsxDEV(Col, {\n      span: 5,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"channel-content\",\n        children: /*#__PURE__*/_jsxDEV(Space, {\n          size: 5,\n          direction: \"vertical\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"channel-content-title\",\n            children: \"S\\u1ED1 l\\u01B0\\u1EE3ng kh\\xE1ch h\\xE0ng\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"channel-content-number\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"dot\",\n              style: {\n                backgroundColor: '#6c6fbf'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 29\n            }, this), loading ? /*#__PURE__*/_jsxDEV(LoadingOutlined, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 40\n            }, this) : totalCustomer]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"channel-content\",\n        children: /*#__PURE__*/_jsxDEV(Space, {\n          size: 5,\n          direction: \"vertical\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"channel-content-title\",\n            children: \"S\\u1ED1 \\u0111\\u01A1n h\\xE0ng\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"channel-content-number\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"dot\",\n              style: {\n                backgroundColor: '#F67B68'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 29\n            }, this), loading ? /*#__PURE__*/_jsxDEV(LoadingOutlined, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 40\n            }, this) : totalOrder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Col, {\n      span: 19,\n      children: /*#__PURE__*/_jsxDEV(Space, {\n        size: 30,\n        direction: \"vertical\",\n        style: {\n          width: '100%'\n        },\n        children: loading ? /*#__PURE__*/_jsxDEV(Skeleton, {\n          active: true,\n          paragraph: {\n            rows: 6\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 32\n        }, this) : /*#__PURE__*/_jsxDEV(HighchartsReact, {\n          highcharts: Highcharts,\n          options: options(data, names, colors)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Chart, \"trpnYfCF8jg0Ovz9724lD1beZKQ=\");\n\n_c = Chart;\nChart.defaultProps = {\n  filterType: EFilterType.MONTH\n};\nexport default Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/AdminClient/src/features/dashboard/components/detailStore/chart.tsx"],"names":["LoadingOutlined","Col","Divider","Row","Skeleton","Space","Highcharts","HighchartsReact","get","map","moment","React","useEffect","useState","storeApi","EFilterType","Chart","filterType","storeId","data","setData","totalCustomer","setTotalCustomer","totalOrder","setTotalOrder","loading","setLoading","getFigures","startTime","startOf","valueOf","toString","endTime","endOf","dataChart","err","names","colors","options","title","text","subtitle","xAxis","categories","WEEK","item","date","split","yAxis","series","showInLegend","name","type","customerCount","orderCount","chart","height","plotOptions","column","borderRadius","pointWidth","undefined","paddingLeft","backgroundColor","width","rows","defaultProps","MONTH"],"mappings":"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","sourcesContent":["import { LoadingOutlined } from '@ant-design/icons';\nimport { Col, Divider, Row, Skeleton, Space } from 'antd';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { get, map } from 'lodash';\nimport moment from 'moment';\nimport React, { FC, useEffect, useState } from 'react';\nimport storeApi from '../../../../api/store-api';\nimport { EFilterType } from '../../../../constants';\n\ninterface Props {\n    filterType: EFilterType;\n    storeId: string;\n}\n\ninterface Idata {\n    date: string;\n    customerCount: number;\n    orderCount: number;\n}\n\nconst Chart: FC<Props> = ({ filterType, storeId }) => {\n    const [data, setData] = useState<Idata[]>([]);\n    const [totalCustomer, setTotalCustomer] = useState<number>(0);\n    const [totalOrder, setTotalOrder] = useState<number>(0);\n    const [loading, setLoading] = useState<boolean>(true);\n\n    useEffect(() => {\n        async function getFigures() {\n            try {\n                if (!storeId) {\n                    setLoading(false);\n                    return;\n                }\n                setLoading(true);\n\n                const startTime: string = moment().startOf(filterType).valueOf().toString();\n                const endTime: string = moment().endOf(filterType).valueOf().toString();\n    \n                const data = await storeApi.getFigures({\n                    storeId,\n                    startTime,\n                    endTime,\n                });\n    \n                const totalCustomer = get(data, 'totalCustomer', 0);\n                setTotalCustomer(totalCustomer);\n    \n                const totalOrder = get(data, 'totalOrder', 0);\n                setTotalOrder(totalOrder);\n    \n                const dataChart = get(data, 'data', []);\n                setData(dataChart);\n            } catch (err) {\n\n            } finally {\n                setLoading(false);\n            }\n        }\n        getFigures();\n    }, [filterType, storeId]);\n\n    const names = [\n        'Số lượng khách hàng',\n        'Số đơn hàng',\n    ];\n\n    const colors = [\n        '#6c6fbf',\n        '#F67B68',\n    ]\n\n    const options = (\n        data: Idata[],\n        names: string[],\n        colors: string[]\n    ): Highcharts.Options => ({\n        title: { text: '' },\n        subtitle: { text: '' },\n        xAxis: {\n            categories:\n                filterType === EFilterType.WEEK\n                    ? ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n                    : map(data, (item) => item.date.split('/')[0]),\n        },\n        yAxis: { title: { text: '' } },\n        series: [\n            {\n                showInLegend: false,\n                name: names[0],\n                type: 'column',\n                data: map(data, (item) => item.customerCount),\n            },\n            {\n                showInLegend: false,\n                name: names[1],\n                type: 'column',\n                data: map(data, (item) => item.orderCount),\n            },\n        ],\n        chart: {\n            height: 250,\n        },\n        colors: colors,\n        plotOptions: {\n            column: {\n                borderRadius: 5,\n                pointWidth: filterType === EFilterType.WEEK ? 20 : undefined,\n            },\n        },\n    });\n\n    return (\n        <Row style={{ paddingLeft: 5 }}>\n            <Col span={5}>\n                <div className=\"channel-content\">\n                    <Space size={5} direction=\"vertical\">\n                        <div className=\"channel-content-title\">Số lượng khách hàng</div>\n                        <div className=\"channel-content-number\">\n                            <span className=\"dot\" style={{ backgroundColor: '#6c6fbf' }}></span>\n                            {loading ? <LoadingOutlined /> : totalCustomer}\n                        </div>\n                    </Space>\n                </div>\n                <Divider />\n                <div className=\"channel-content\">\n                    <Space size={5} direction=\"vertical\">\n                        <div className=\"channel-content-title\">Số đơn hàng</div>\n                        <div className=\"channel-content-number\">\n                            <span className=\"dot\" style={{ backgroundColor: '#F67B68' }}></span>\n                            {loading ? <LoadingOutlined /> : totalOrder}\n                        </div>\n                    </Space>\n                </div>\n            </Col>\n            <Col span={19}>\n                <Space size={30} direction=\"vertical\" style={{ width: '100%' }}>\n                    {loading ? <Skeleton active paragraph={{ rows: 6 }} /> :\n                        <HighchartsReact\n                            highcharts={Highcharts}\n                            options={options(data, names, colors)}\n                        />\n                    }\n                </Space>\n            </Col>\n        </Row>\n    )\n}\n\nChart.defaultProps = {\n    filterType: EFilterType.MONTH,\n}\n\nexport default Chart;"]},"metadata":{},"sourceType":"module"}