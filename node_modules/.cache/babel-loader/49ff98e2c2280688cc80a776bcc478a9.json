{"ast":null,"code":"import constants from '../constants';\nimport axios from './axios-client';\n\nasync function loadStores({\n  limit = 10,\n  page = 1,\n  search,\n  sort = 'createdAt',\n  direction = 'asc'\n}) {\n  const url = `/administrator/v1/stores`;\n  const params = {\n    limit,\n    page,\n    search,\n    sort,\n    direction\n  };\n  const response = await axios({\n    method: 'GET',\n    url,\n    params,\n    headers: {\n      'Cache-Control': 'no-cache'\n    }\n  });\n  return response;\n}\n\nasync function loadStore({\n  storeId\n}) {\n  const url = `/administrator/v1/stores/${storeId}`;\n  const response = await axios({\n    method: 'GET',\n    url,\n    headers: {\n      'Cache-Control': 'no-cache'\n    }\n  });\n  return response;\n}\n\nasync function loadNewBillings({\n  limit = 10,\n  page = 1,\n  search,\n  sort = 'createdAt',\n  direction = 'desc',\n  type\n}) {\n  const url = `/administrator/v1/admin/billing-stores`;\n  const params = {\n    limit,\n    page,\n    ...(search && {\n      search\n    }),\n    sort,\n    direction,\n    ...(type && type !== constants.ROOT && {\n      type\n    })\n  };\n  const response = await axios({\n    method: 'GET',\n    url,\n    params\n  });\n  return response;\n}\n\nasync function approveBilling({\n  billingId\n}) {\n  const url = `/administrator/v1/admin/billing-stores/${billingId}/approve`;\n  const response = await axios({\n    method: 'POST',\n    url,\n    data: {}\n  });\n  return response;\n}\n\nasync function getFigures({\n  storeId,\n  startTime,\n  endTime\n}) {\n  const url = `/administrator/v1/report/stores/${storeId}`;\n  const params = {\n    startTime,\n    endTime\n  };\n  const data = await axios({\n    method: 'GET',\n    url,\n    params,\n    headers: {\n      'Cache-Control': 'no-cache'\n    }\n  });\n  return data;\n}\n\nexport default {\n  loadStores,\n  loadStore,\n  loadNewBillings,\n  approveBilling,\n  getFigures\n};","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/AdminClient/src/api/store-api.ts"],"names":["constants","axios","loadStores","limit","page","search","sort","direction","url","params","response","method","headers","loadStore","storeId","loadNewBillings","type","ROOT","approveBilling","billingId","data","getFigures","startTime","endTime"],"mappings":"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","sourcesContent":["import constants from '../constants';\nimport axios from './axios-client';\n\nasync function loadStores({\n    limit = 10,\n    page = 1,\n    search,\n    sort = 'createdAt',\n    direction = 'asc',\n}: {\n    limit?: number;\n    page?: number;\n    search?: string;\n    sort?: string;\n    direction?: string;\n}): Promise<any> {\n    const url = `/administrator/v1/stores`;\n\n    const params = {\n        limit,\n        page,\n        search,\n        sort,\n        direction,\n    };\n\n    const response = await axios({\n        method: 'GET',\n        url,\n        params,\n        headers: {\n            'Cache-Control': 'no-cache',\n        }\n    });\n\n    return response;\n}\n\nasync function loadStore({ storeId }: { storeId: string }): Promise<any> {\n    const url = `/administrator/v1/stores/${storeId}`;\n\n    const response = await axios({\n        method: 'GET',\n        url,\n        headers: {\n            'Cache-Control': 'no-cache',\n        }\n    });\n\n    return response;\n}\n\nasync function loadNewBillings({\n    limit = 10,\n    page = 1,\n    search,\n    sort = 'createdAt',\n    direction = 'desc',\n    type,\n}: {\n    limit?: number; \n    page?: number;\n    search?: string;\n    sort?: string;\n    direction?: string;\n    type?: string;\n}): Promise<any> {\n    const url = `/administrator/v1/admin/billing-stores`;\n\n    const params: any = {\n        limit,\n        page,\n        ...search && { search },\n        sort,\n        direction,\n        ...type && type !== constants.ROOT && { type },\n    }\n\n    const response = await axios({\n        method: 'GET',\n        url,\n        params,\n    });\n\n    return response;\n}\n\nasync function approveBilling({ billingId }: { billingId: string }): Promise<any> {\n    const url = `/administrator/v1/admin/billing-stores/${billingId}/approve`;\n\n    const response = await axios({\n        method: 'POST',\n        url,\n        data: {},\n    });\n    return response;\n}\n\nasync function getFigures({\n    storeId,\n    startTime,\n    endTime,\n}: {\n    storeId: string,\n    startTime: string,\n    endTime: string,\n}): Promise<any> {\n    const url = `/administrator/v1/report/stores/${storeId}`;\n\n    const params = {\n        startTime,\n        endTime,\n    }\n\n    const data = await axios({\n        method: 'GET',\n        url,\n        params,\n        headers: {\n            'Cache-Control': 'no-cache',\n        }\n    });\n\n    return data;\n}\n\nexport default {\n    loadStores,\n    loadStore,\n    loadNewBillings,\n    approveBilling,\n    getFigures,\n};\n"]},"metadata":{},"sourceType":"module"}