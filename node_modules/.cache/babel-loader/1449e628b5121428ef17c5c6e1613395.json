{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport authApi from '../../../api/auth-api';\nconst authSlide = createSlice({\n  name: 'auth',\n  initialState: {\n    loading: true,\n    isAuth: false,\n    isLogout: false,\n    user: null\n  },\n  reducers: {\n    loadUserStart(state) {\n      state.loading = true;\n    },\n\n    loadUserSuccess(state, action) {\n      state.loading = false;\n      state.user = action.payload;\n      state.isAuth = true;\n      state.isLogout = false;\n    },\n\n    loadUserFailed(state) {\n      localStorage.removeItem('token');\n      state.loading = false;\n      state.user = null;\n      state.isAuth = false;\n      state.isLogout = true;\n    },\n\n    logout(state) {\n      localStorage.removeItem('token');\n      state.loading = false;\n      state.user = null;\n      state.isAuth = false;\n      state.isLogout = true;\n    }\n\n  }\n});\nconst {\n  actions,\n  reducer\n} = authSlide;\nexport const {\n  loadUserStart,\n  loadUserSuccess,\n  loadUserFailed,\n  logout\n} = actions;\nexport const loadUser = () => async dispatch => {\n  try {\n    dispatch(loadUserStart());\n    const response = await authApi.getUser();\n\n    if (response.permissions && response.permissions.includes('administrator')) {\n      return dispatch(loadUserSuccess(response));\n    }\n\n    return dispatch(loadUserFailed());\n  } catch (err) {\n    dispatch(loadUserFailed());\n  }\n};\nexport default reducer;","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/AdminClient/src/features/auth/state/authSlide.ts"],"names":["createSlice","authApi","authSlide","name","initialState","loading","isAuth","isLogout","user","reducers","loadUserStart","state","loadUserSuccess","action","payload","loadUserFailed","localStorage","removeItem","logout","actions","reducer","loadUser","dispatch","response","getUser","permissions","includes","err"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,OAAP,MAAoB,uBAApB;AASA,MAAMC,SAAS,GAAGF,WAAW,CAAC;AAC1BG,EAAAA,IAAI,EAAE,MADoB;AAE1BC,EAAAA,YAAY,EAAE;AACVC,IAAAA,OAAO,EAAE,IADC;AAEVC,IAAAA,MAAM,EAAE,KAFE;AAGVC,IAAAA,QAAQ,EAAE,KAHA;AAIVC,IAAAA,IAAI,EAAE;AAJI,GAFY;AAQ1BC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,aAAa,CAACC,KAAD,EAAQ;AACjBA,MAAAA,KAAK,CAACN,OAAN,GAAgB,IAAhB;AACH,KAHK;;AAINO,IAAAA,eAAe,CAACD,KAAD,EAAQE,MAAR,EAAgB;AAC3BF,MAAAA,KAAK,CAACN,OAAN,GAAgB,KAAhB;AACAM,MAAAA,KAAK,CAACH,IAAN,GAAaK,MAAM,CAACC,OAApB;AACAH,MAAAA,KAAK,CAACL,MAAN,GAAe,IAAf;AACAK,MAAAA,KAAK,CAACJ,QAAN,GAAiB,KAAjB;AACH,KATK;;AAUNQ,IAAAA,cAAc,CAACJ,KAAD,EAAQ;AAClBK,MAAAA,YAAY,CAACC,UAAb,CAAwB,OAAxB;AAEAN,MAAAA,KAAK,CAACN,OAAN,GAAgB,KAAhB;AACAM,MAAAA,KAAK,CAACH,IAAN,GAAa,IAAb;AACAG,MAAAA,KAAK,CAACL,MAAN,GAAe,KAAf;AACAK,MAAAA,KAAK,CAACJ,QAAN,GAAiB,IAAjB;AACH,KAjBK;;AAkBNW,IAAAA,MAAM,CAACP,KAAD,EAAQ;AACVK,MAAAA,YAAY,CAACC,UAAb,CAAwB,OAAxB;AAEAN,MAAAA,KAAK,CAACN,OAAN,GAAgB,KAAhB;AACAM,MAAAA,KAAK,CAACH,IAAN,GAAa,IAAb;AACAG,MAAAA,KAAK,CAACL,MAAN,GAAe,KAAf;AACAK,MAAAA,KAAK,CAACJ,QAAN,GAAiB,IAAjB;AACH;;AAzBK;AARgB,CAAD,CAA7B;AAqCA,MAAM;AAAEY,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAuBlB,SAA7B;AAEA,OAAO,MAAM;AAAEQ,EAAAA,aAAF;AAAiBE,EAAAA,eAAjB;AAAkCG,EAAAA,cAAlC;AAAkDG,EAAAA;AAAlD,IAA6DC,OAAnE;AAEP,OAAO,MAAME,QAAQ,GAAG,MAAM,MAAOC,QAAP,IAAyB;AACnD,MAAI;AACAA,IAAAA,QAAQ,CAACZ,aAAa,EAAd,CAAR;AACA,UAAMa,QAAQ,GAAG,MAAMtB,OAAO,CAACuB,OAAR,EAAvB;;AAEA,QAAID,QAAQ,CAACE,WAAT,IAAyBF,QAAQ,CAACE,WAAV,CAAmCC,QAAnC,CAA4C,eAA5C,CAA5B,EAA0F;AACtF,aAAOJ,QAAQ,CAACV,eAAe,CAACW,QAAD,CAAhB,CAAf;AACH;;AAED,WAAOD,QAAQ,CAACP,cAAc,EAAf,CAAf;AACH,GATD,CASE,OAAOY,GAAP,EAAY;AACVL,IAAAA,QAAQ,CAACP,cAAc,EAAf,CAAR;AACH;AACJ,CAbM;AAeP,eAAeK,OAAf","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport authApi from '../../../api/auth-api';\n\nexport interface IAuth {\n    loading: boolean;\n    isAuth: boolean;\n    isLogout: boolean;\n    user: any;\n}\n\nconst authSlide = createSlice({\n    name: 'auth',\n    initialState: {\n        loading: true,\n        isAuth: false,\n        isLogout: false,\n        user: null,\n    },\n    reducers: {\n        loadUserStart(state) {\n            state.loading = true;\n        },\n        loadUserSuccess(state, action) {\n            state.loading = false;\n            state.user = action.payload;\n            state.isAuth = true;\n            state.isLogout = false;\n        },\n        loadUserFailed(state) {\n            localStorage.removeItem('token');\n\n            state.loading = false;\n            state.user = null;\n            state.isAuth = false;\n            state.isLogout = true;\n        },\n        logout(state) {\n            localStorage.removeItem('token');\n\n            state.loading = false;\n            state.user = null;\n            state.isAuth = false;\n            state.isLogout = true;\n        },\n    },\n});\n\nconst { actions, reducer } = authSlide;\n\nexport const { loadUserStart, loadUserSuccess, loadUserFailed, logout } = actions;\n\nexport const loadUser = () => async (dispatch: any) => {\n    try {\n        dispatch(loadUserStart());\n        const response = await authApi.getUser();\n\n        if (response.permissions && (response.permissions as string[]).includes('administrator')) {\n            return dispatch(loadUserSuccess(response));\n        }\n\n        return dispatch(loadUserFailed());\n    } catch (err) {\n        dispatch(loadUserFailed());\n    }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}